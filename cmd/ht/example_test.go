// Copyright 2017 Volker Dobler.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	"github.com/vdobler/ht/ht"
	"github.com/vdobler/ht/suite"
)

func allTestExamples() []string {
	// TODO: extract from RootExamples
	return []string{
		"Test",
		"Test.HTML",
		"Test.JSON",
		"Test.POST",
		"Test.POST.FileUpload",
		"Test.POST.ManualBody",
		"Test.POST.BodyFromFile",
		"Test.Redirection",
		"Test.FollowRedirect",
	}
}

var (
	exampleHTML = []byte(`<!DOCTYPE html>
<html>
<head>
    <title>Sample HTML</title>
</head>
<body>
  <h1>Sample HTML</h1>
  <ul>
    <li><a href="/other">Other</a></li>
    <li><a href="/json">JSON</a></li>
  </ul>
</body>
</html>`)

	exampleJSON = []byte(`{
  "Date": "2017-09-20",
  "Numbers": [6, 25, 26, 27, 31, 38],
  "Finished": true
}
`)
)

func exampleHandler(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/html":
		w.Header().Set("Content-Type", "text/html")
		http.SetCookie(w, &http.Cookie{Name: "SessionID", Value: "deadbeef1234",
			Path: "/", HttpOnly: true})
		w.WriteHeader(200)
		w.Write(exampleHTML)
	case "/other":
		w.Header().Set("Content-Type", "text/plain")
		w.WriteHeader(200)
		w.Write([]byte("Some other document."))
	case "/json":
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		w.Write(exampleJSON)
	case "/post":
		if r.Method != http.MethodPost {
			http.Error(w, "No, I won't do that.", http.StatusMethodNotAllowed)
		}
		w.WriteHeader(200)
		body, _ := ioutil.ReadAll(r.Body)
		w.Write(body)
	case "/redirect2":
		w.Header().Set("Location", "/redirect1")
		w.WriteHeader(http.StatusSeeOther) // 303
	case "/redirect1":
		w.Header().Set("Location", "/html")
		w.WriteHeader(http.StatusMovedPermanently) // 302
	default:
		http.Error(w, "Oooops", http.StatusNotFound)
	}
}

func TestExampleTest(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(exampleHandler))
	defer ts.Close()
	u, err := url.Parse(ts.URL)
	if err != nil {
		t.Fatalf("Unexpected error: %#v", err)
	}

	variablesFlag["HOST"] = u.Host
	outputDir = "example-tests"
	randomSeed = 57 // must be prime
	silent = true
	ssilent = true

	for _, testname := range allTestExamples() {
		t.Run(testname, func(t *testing.T) {
			// Can be read in raw form:
			rawtests, err := loadTests([]string{"./examples/" + testname})
			if err != nil {
				t.Fatalf("Unexpected error: %s", err)
			}

			// Wrap into autogenerated suite
			s := &suite.RawSuite{
				File: &suite.File{
					Data: "---",
					Name: "<internal>",
				},
				Name:      testname,
				Main:      []suite.RawElement{{}}, // dummy
				Variables: variablesFlag,
			}

			// Suite validates:
			s.AddRawTests(rawtests...)
			err = s.Validate(variablesFlag)
			if err != nil {
				t.Fatalf("Unexpected error: %s", err)
			}

			// Execute the suite:
			prepareHT()
			prepareOutputDir()
			suites := []*suite.RawSuite{s}
			acc, err := executeSuites(suites, variablesFlag, nil)
			if err != nil {
				t.Fatalf("Unexpected error: %s", err)
			}
			if acc.Status != ht.Pass {
				t.Fatalf("Test did not pass: %s", acc.Status)
			}
		})
	}
}
